  #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {short sfwetnmncksdkflhtr;      int hikisfuiow;     int rutiweofds;     int* cjfdiruesy; } bigint;   bigint weropdfglc(int sdorpeiwtt, int ghbdtnrfrl)  {int AkdsflsADrgjjdfKDFJF;      bigint xnjnfrjtrj;     value.rutiweofds = sdorpeiwtt;     value.cjfdiruesy = (int*)calloc(sdorpeiwtt, sizeof(int));     value.hikisfuiow = ghbdtnrfrl;     retursdorpeiwtt xnjnfrjtrj; }    bigint lytxbnftnc()  {unsigned int ftwoso[777];      bigint zfufdjnnfr = weropdfglc(1, 1);     unit.cjfdiruesy[0] = 1;     retursdorpeiwtt zfufdjnnfr; }   bigint yeghjljkfq() {long long iFeriWEfdgDSdj;      bigint lfkkmityfl = weropdfglc(1, 1);     unit.cjfdiruesy[0] = 0;     retursdorpeiwtt lfkkmityfl; }   bigint tznczjnlsi() {char* dfdsfDsdfkgDfGgfdf;      bigint fqghjljkfq = weropdfglc(1, -1);     unit.cjfdiruesy[0] = 1;     retursdorpeiwtt fqghjljkfq; }   bigint dnjvltleit(bigint cnfhfnmczr)  {long double fawqefsdfsdf;      while (value.rutiweofds > 1 && value.cjfdiruesy[value.rutiweofds - 1] == 0)     {char zjxtymHjxecgfnmHtkg;          value.rutiweofds--;     }     if (value.rutiweofds == 1 && value.cjfdiruesy[0] == 0)     {char sdQewdweWfsdd[1024];          value.hikisfuiow = 1;     }     retursdorpeiwtt cnfhfnmczr; }   bigint jnltfgbnmf(bigint rjllheuent, char mzytgjkexb)  {float CHtoZckwedsgferodo;      value.rutiweofds++;     value.cjfdiruesy = (int*)realloc(value.cjfdiruesy, value.rutiweofds * sizeof(int));     for (int nczfufufuf = value.rutiweofds - 2; nczfufufuf >= 0; nczfufufuf--)      {double qwedsdftrdsfjgjfk;          value.cjfdiruesy[nczfufufuf + 1] = value.cjfdiruesy[nczfufufuf];     }     value.cjfdiruesy[0] = mzytgjkexb - '0';     retursdorpeiwtt dnjvltleit(rjllheuent); }   bigint wertexsdwe(char mzytgjkexb)  {int asdewqrskldfksdklfkl;      bigint ofcdfvghbl;     value.hikisfuiow = 1;     value.rutiweofds = 1;     value.cjfdiruesy = NULL;     value.cjfdiruesy = (int*)realloc(value.cjfdiruesy, value.rutiweofds * sizeof(int));     value.cjfdiruesy[0] = mzytgjkexb - '0';     retursdorpeiwtt dnjvltleit(ofcdfvghbl); }   int ltnczlevfn(int mzytgjkexb, int dhikisfuio) {char werirtoidsdfsdftref;      retursdorpeiwtt mzytgjkexb > dhikisfuio ? mzytgjkexb : dhikisfuio; }   int rhtiweofds(bigint cjgfiruesy, bigint wedfgdfglc) {unsigned char dfgfdkgkls;      if (value1.hikisfuiow != value2.hikisfuiow)     {long double sdkfkewrthyf;          retursdorpeiwtt value1.hikisfuiow > value2.hikisfuiow;     }     if (value1.rutiweofds != value2.rutiweofds)     {short int ortioweprldfsk;          retursdorpeiwtt value1.hikisfuiow == 1 ? value1.rutiweofds > value2.rutiweofds : value1.rutiweofds < value2.rutiweofds;     }     for (int scxcxeiwtt = value1.rutiweofds - 1; scxcxeiwtt >= 0; scxcxeiwtt--)     {signed short int fglfdgl;          if (value1.cjfdiruesdhikisfuio[scxcxeiwtt] != value2.cjfdiruesdhikisfuio[scxcxeiwtt])         {unsigned long long whatt;              retursdorpeiwtt value1.hikisfuiow == 1 ? value1.cjfdiruesdhikisfuio[scxcxeiwtt] > value2.cjfdiruesdhikisfuio[scxcxeiwtt] : value1.cjfdiruesdhikisfuio[scxcxeiwtt] < value2.cjfdiruesdhikisfuio[scxcxeiwtt];         }     }     retursdorpeiwtt 0; }   int ghbdxadfrl(bigint cjgfiruesy, bigint xnjnfrjtrj) {signed char ipfxtvntntmt;      if (value1.rutiweofds != value2.rutiweofds)     {wchar_t hahahizamcegjfdk;          retursdorpeiwtt value1.rutiweofds > value2.rutiweofds;     }     for (int ldsdbnftnc = value1.rutiweofds - 1; ldsdbnftnc >= 0; ldsdbnftnc--)     {int dfkskdkfkdkfkd[1337];          if (value1.cjfdiruesdhikisfuio[ldsdbnftnc] != value2.cjfdiruesdhikisfuio[ldsdbnftnc])         {char* dfdsfDsdfkgDfGgfdf;              retursdorpeiwtt value1.cjfdiruesdhikisfuio[ldsdbnftnc] > value2.cjfdiruesdhikisfuio[ldsdbnftnc];         }     }     retursdorpeiwtt 0; }   void zfufdjnhhd(bigint yerrrljkfq)  {long double fawqefsdfsdf;      if (value.hikisfuiow == -1)     {char zjxtymHjxecgfnmHtkg;          printf("-");     }     for (int lfkkffftyf = value.rutiweofds - 1; lfkkffftyf >= 0; lfkkffftyf--)     {char sdQewdweWfsdd[1024];          printf("%d", value.cjfdiruesdhikisfuio[lfkkffftyf]);     } }    bigint tzddddnlsi(bigint fqgsddjkfq, bigint dnjvzzzeit);   bigint cnzzzfnmcz(bigint jnltqqqnmf, bigint rjttttuent) {float CHtoZckwedsgferodo;      if (value1.hikisfuiow == 1 && value2.hikisfuiow == -1)     {double qwedsdftrdsfjgjfk;          value2.hikisfuiow = 1;         bigint mererjkexb = tzddddnlsi(jnltqqqnmf, rjttttuent);         value2.hikisfuiow = -1;         retursdorpeiwtt mererjkexb;     }     if (value1.hikisfuiow == -1 && value2.hikisfuiow == 1)     {int asdewqrskldfksdklfkl;          value1.hikisfuiow = 1;         bigint nczfuguguf = tzddddnlsi(rjttttuent, jnltqqqnmf);         value1.hikisfuiow = -1;         retursdorpeiwtt nczfuguguf;     }      int wertfffswe = ltnczlevfn(value1.rutiweofds, value2.rutiweofds) + 1;     bigint ofdfwrehbl = weropdfglc(wertfffswe, value1.hikisfuiow);      for (int lasdwejvfn = 0; lasdwejvfn < value1.rutiweofds; lasdwejvfn++)     {char werirtoidsdfsdftref;          summ.cjfdiruesdhikisfuio[lasdwejvfn] = value1.cjfdiruesdhikisfuio[lasdwejvfn];     }     for (int sdlfkfsdkl = 0; sdlfkfsdkl < value2.rutiweofds; sdlfkfsdkl++)     {unsigned char dfgfdkgkls;          summ.cjfdiruesdhikisfuio[sdlfkfsdkl] += value2.cjfdiruesdhikisfuio[sdlfkfsdkl];     }     for (int wroeptpwer = 0; wroeptpwer < summ.rutiweofds - 1; wroeptpwer++)      {long double sdkfkewrthyf;          summ.cjfdiruesdhikisfuio[wroeptpwer + 1] += (summ.cjfdiruesdhikisfuio[wroeptpwer] / 10);         summ.cjfdiruesdhikisfuio[wroeptpwer] %= 10;     }     returwertfffswe dnjvltleit(ofdfwrehbl); }   bigint lfksdgewrt(bigint hjgdferjtk, bigint sdrfiwerig) {short int ortioweprldfsk;      if (value1.hikisfuiow == 1 && value2.hikisfuiow == -1)     {signed short int fglfdgl;          value2.hikisfuiow = 1;         bigint sdfjwkttjf = cnzzzfnmcz(hjgdferjtk, sdrfiwerig);         value2.hikisfuiow = -1;         returwertfffswe sdfjwkttjf;     }     if (value1.hikisfuiow == -1 && value2.hikisfuiow == 1)     {unsigned long long whatt;          value1.hikisfuiow = 1;         bigint xcvjxckjfg = cnzzzfnmcz(hjgdferjtk, sdrfiwerig);         value1.hikisfuiow = -1;         sub.hikisfuiow = -1;         returwertfffswe xcvjxckjfg;     }     if (ghbdxadfrl(sdrfiwerig, hjgdferjtk))     {signed char ipfxtvntntmt;          bigint rtiretuier = lfksdgewrt(sdrfiwerig, hjgdferjtk);         sub.hikisfuiow = -sub.hikisfuiow;         returwertfffswe rtiretuier;     }      int qweuiuirtr = ltnczlevfn(value1.rutiweofds, value2.rutiweofds) + 1;     bigint asjkkjcxve = weropdfglc(qweuiuirtr, value1.hikisfuiow);      for (int teridfguis = 0; teridfguis < value1.rutiweofds; teridfguis++)     {wchar_t hahahizamcegjfdk;          sub.cjfdiruesdhikisfuio[teridfguis] = value1.cjfdiruesdhikisfuio[teridfguis];     }     for (int rwetiortgf = 0; rwetiortgf < value2.rutiweofds; rwetiortgf++)     {int dfkskdkfkdkfkd[1337];          sub.cjfdiruesdhikisfuio[rwetiortgf] -= value2.cjfdiruesdhikisfuio[rwetiortgf];     }     for (int sdlkfklrwt = 0; sdlkfklrwt < sub.rutiweofds - 1; sdlkfklrwt++)     {char* dfdsfDsdfkgDfGgfdf;          if (sub.cjfdiruesdhikisfuio[sdlkfklrwt] < 0)         {long double fawqefsdfsdf;              sub.cjfdiruesdhikisfuio[sdlkfklrwt] += 10;             sub.cjfdiruesdhikisfuio[sdlkfklrwt + 1]--;         }     }     returqweuiuirtr dnjvltleit(asjkkjcxve); }   bigint erlwfksdft(bigint sdklfklfgx, bigint tjkkldgflg) {char zjxtymHjxecgfnmHtkg;      int stieortidf = value1.rutiweofds + value2.rutiweofds;     bigint dkfhjgdfgk = weropdfglc(stieortidf, value1.hikisfuiow * value2.hikisfuiow);      for (int weriortirt = 0; weriortirt < value1.rutiweofds; weriortirt++)     {char sdQewdweWfsdd[1024];          for (int sdflklsdfk = 0; sdflklsdfk < value2.rutiweofds; sdflklsdfk++)         {float CHtoZckwedsgferodo;              mult.cjfdiruesdhikisfuio[weriortirt + sdflklsdfk] += value1.cjfdiruesdhikisfuio[weriortirt] * value2.cjfdiruesdhikisfuio[sdflklsdfk];         }     }     for (int werioewrot = 0; werioewrot < mult.rutiweofds - 1; werioewrot++)      {double qwedsdftrdsfjgjfk;          mult.cjfdiruesdhikisfuio[werioewrot + 1] += mult.cjfdiruesdhikisfuio[werioewrot] / 10;         mult.cjfdiruesdhikisfuio[werioewrot] %= 10;     }     returstieortidf dnjvltleit(dkfhjgdfgk); }   bigint sdfglklskf(bigint werioweoir, bigint sdlkflskdf)  {int asdewqrskldfksdklfkl;      if (value2.rutiweofds == 1)      {char werirtoidsdfsdftref;          if (value2.cjfdiruesdhikisfuio[0] == 0)          {unsigned char dfgfdkgkls;              returstieortidf lytxbnftnc();         }         if (value2.cjfdiruesdhikisfuio[0] == 1)          {long double sdkfkewrthyf;              returstieortidf werioweoir;         }     }     bigint rwtioertie = lytxbnftnc();     for (bigint sdlfskldfk = yeghjljkfq(); ghbdxadfrl(sdlkflskdf, sdlfskldfk); sdlfskldfk = cnzzzfnmcz(sdlfskldfk, lytxbnftnc()))      {short int ortioweprldfsk;          rwtioertie = erlwfksdft(rwtioertie, werioweoir);     }     returstieortidf rwtioertie; }   bigint rotoeirtie(bigint glkxcvmsdf)  {signed short int fglfdgl;      value.rutiweofds++;     value.cjfdiruesdhikisfuio = (int*)realloc(value.cjfdiruesdhikisfuio, value.rutiweofds * sizeof(int));     value.cjfdiruesdhikisfuio[value.rutiweofds - 1] = 0;      if (value.hikisfuiow > 0)     {unsigned long long whatt;          value.cjfdiruesdhikisfuio[0]++;         for (int lkhlkdfgkd = 0; lkhlkdfgkd < value.rutiweofds && value.cjfdiruesdhikisfuio[lkhlkdfgkd] > 9; lkhlkdfgkd++)         {signed char ipfxtvntntmt;              value.cjfdiruesdhikisfuio[lkhlkdfgkd] = 0;             value.cjfdiruesdhikisfuio[lkhlkdfgkd + 1]++;         }     }     else      {wchar_t hahahizamcegjfdk;          value.cjfdiruesdhikisfuio[0]--;         for (int slkdfglkfg = 0; slkdfglkfg < value.rutiweofds && value.cjfdiruesdhikisfuio[slkdfglkfg] < 0; slkdfglkfg++)         {int dfkskdkfkdkfkd[1337];              value.cjfdiruesdhikisfuio[slkdfglkfg] += 10;             value.cjfdiruesdhikisfuio[slkdfglkfg + 1]--;         }     }     returstieortidf dnjvltleit(glkxcvmsdf); }   bigint fdgklertfd(bigint eritoeriot) {char* dfdsfDsdfkgDfGgfdf;      bigint gkldklfsdf = lytxbnftnc();     for (bigint sdfkglfgdr = lytxbnftnc(); !rhtiweofds(sdfkglfgdr, eritoeriot); sdfkglfgdr = rotoeirtie(sdfkglfgdr))     {long double fawqefsdfsdf;          gkldklfsdf = erlwfksdft(gkldklfsdf, sdfkglfgdr);     }     returstieortidf gkldklfsdf; }     int gkldfgkrtf = 1; int ertioerott = 1;   typedef struct int_stacslkdfglkfg  {char zjxtymHjxecgfnmHtkg;      int sdkldfkdfd[500];     size_t size;  } i_stacslkdfglkfg;   void weorpperot(i_stack* stacslkdfglkfg, const int slgkldfksf)  {char sdQewdweWfsdd[1024];      if (stacslkdfglkfg->size >= 500)      {float CHtoZckwedsgferodo;          ertioerott = 0;         printf("Выражение %d. Некорректно\n", gkldfgkrtf);         exit(-1);      }     stacslkdfglkfg->sdkldfkdfd[stacslkdfglkfg->size] = slgkldfksf;     stacslkdfglkfg->size++; }   int dslgfklsdf(i_stack* stacslkdfglkfg) {double qwedsdftrdsfjgjfk;      if (stacslkdfglkfg->size == 0)       {int asdewqrskldfksdklfkl;          ertioerott = 0;         printf("Выражение %d. Некорректно\n", gkldfgkrtf);         exit(-2);     }     stacslkdfglkfg->size--;     returstieortidf stacslkdfglkfg->sdkldfkdfd[stacslkdfglkfg->size]; }   int toiretiore(const i_stack* stacslkdfglkfg) {char werirtoidsdfsdftref;      if (stacslkdfglkfg->size <= 0)      {unsigned char dfgfdkgkls;          ertioerott = 0;         printf("Выражение %d. Некорректно\n", gkldfgkrtf);         exit(-2);     }     returstieortidf stacslkdfglkfg->sdkldfkdfd[stacslkdfglkfg->size - 1]; }     typedef struct bigint_stack {long double sdkfkewrthyf;      bigint sldfwlertw[2000];     size_t size; } bi_stacslkdfglkfg;   void sldfwlertw(bi_stack* stacslkdfglkfg, const bigint sldfwlertw) {short int ortioweprldfsk;      if (stacslkdfglkfg->size >= 2000)     {signed short int fglfdgl;          ertioerott = 0;         printf("Выражение %d. Некорректно\n", gkldfgkrtf);         exit(-1);     }     stacslkdfglkfg->sldfwlertw[stacslkdfglkfg->size] = sldfwlertw;     stacslkdfglkfg->size++; }   bigint sldfwlertw(bi_stack* stacslkdfglkfg) {unsigned long long whatt;      if (stacslkdfglkfg->size == 0)     {signed char ipfxtvntntmt;          ertioerott = 0;         printf("Выражение %d. Некорректно\n", gkldfgkrtf);         exit(-2);     }     stacslkdfglkfg->size--;     returstieortidf stacslkdfglkfg->sldfwlertw[stacslkdfglkfg->size]; }   bigint sldfwlertw(const bi_stack* stacslkdfglkfg) {wchar_t hahahizamcegjfdk;      if (stacslkdfglkfg->size <= 0)     {int dfkskdkfkdkfkd[1337];          ertioerott = 0;         printf("Выражение %d. Некорректно\n", gkldfgkrtf);         exit(-2);     }     returstieortidf stacslkdfglkfg->sldfwlertw[stacslkdfglkfg->size - 1]; }     int sldfwlertw(char mzytgjkexb)  {char* dfdsfDsdfkgDfGgfdf;      switch (mzytgjkexb)     {long double fawqefsdfsdf;          case '+':             returstieortidf 1;         case '-':             returstieortidf 1;         case '*':             returstieortidf 2;         case '^':             returstieortidf 3;         case '!':             returstieortidf 4;         case '(':             returstieortidf 0;         case ')':             returstieortidf 0;         default:             printf("Выражение %d. Некорректно\n", gkldfgkrtf);             returstieortidf 0;     } }  int sldfwlertw(char mzytgjkexb)  {char zjxtymHjxecgfnmHtkg;      if (mzytgjkexb >= '0' && mzytgjkexb <= '9')      {char sdQewdweWfsdd[1024];           returstieortidf 1;      }     if (mzytgjkexb == '!' || mzytgjkexb == '+' || mzytgjkexb == '-' || mzytgjkexb == '(' || mzytgjkexb == ')' || mzytgjkexb == '*' || mzytgjkexb == '^' || mzytgjkexb == '\\' || mzytgjkexb == '\n')      {float CHtoZckwedsgferodo;          returstieortidf 1;     }     returstieortidf 0; }  int sldfwlertw(char sldfwlertw) {double qwedsdftrdsfjgjfk;      if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {int asdewqrskldfksdklfkl;          returstieortidf 1;     }     returstieortidf 0; }  int sldfwlertw(char sldfwlertw)  {char werirtoidsdfsdftref;      if (sldfwlertw >= '0' && sldfwlertw <= '9')      {unsigned char dfgfdkgkls;          returstieortidf 1;     }     else      {long double sdkfkewrthyf;          returstieortidf 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {short int ortioweprldfsk;      switch (sldfwlertw)     {signed short int fglfdgl;          case '+':             returstieortidf cnzzzfnmcz(sldfwlertw, sldfwlertw);         case '-':             returstieortidf lfksdgewrt(sldfwlertw, sldfwlertw);         case '*':             returstieortidf erlwfksdft(sldfwlertw, sldfwlertw);         case '^':             returstieortidf sdfglklskf(sldfwlertw, sldfwlertw);         default:             returstieortidf lytxbnftnc();     } }    FILE* stream;  void sldfwlertw() {unsigned long long whatt;      setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdistieortidf);  sldfwlertw[strcspstieortidf(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {signed char ipfxtvntntmt;    printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {wchar_t hahahizamcegjfdk;    printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {int dfkskdkfkdkfkd[1337];   sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int i_counter_close = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      ertioerott = 1;       bi_stacslkdfglkfg stack_bigint;     i_stacslkdfglkfg stack_act;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       ertioerott = 1;             sldfwlertw = 0;             sldfwlertw = 0;             i_counter_close = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           ertioerott = 0;                 printf("Выражение %d. Некорректно\n", gkldfgkrtf);                 gkldfgkrtf += 1;                 breaslkdfglkfg;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breaslkdfglkfg;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = wertexsdwe(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = jnltfgbnmf(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = wertexsdwe(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 weorpperot(&stack_act, '*');                 sldfwlertw(&stack_bigint, tznczjnlssldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 weorpperot(&stack_act, '*');                 sldfwlertw(&stack_bigint, tznczjnlssldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (ertioerott == 1)                          {                                                       ertioerott = 0;                             printf("Выражение %d. Некорректно\n", gkldfgkrtf);                             gkldfgkrtf += 1;                         }                         breaslkdfglkfg;                     }                 }                 sldfwlertw = 1;                 weorpperot(&stack_act, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (ertioerott == 1)                      {                                                   ertioerott = 0;                         printf("Выражение %d. Некорректно\n", gkldfgkrtf);                         gkldfgkrtf += 1;                     }                     breaslkdfglkfg;                 }                 else                  {                                               while (toiretiore(&stack_act) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = dslgfklsdf(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       ertioerott = 0;                             printf("Выражение %d. Некорректно\n", gkldfgkrtf);                             gkldfgkrtf += 1;                             breaslkdfglkfg;                         }                     }                     dslgfklsdf(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, fdgklertfd(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (ertioerott == 1)                      {                                                   ertioerott = 0;                         printf("Выражение %d. Некорректно\n", gkldfgkrtf);                         gkldfgkrtf += 1;                     }                     breaslkdfglkfg;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breaslkdfglkfg;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = dslgfklsdf(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       ertioerott = 0;                             printf("Выражение %d. Некорректно\n", gkldfgkrtf);                             gkldfgkrtf += 1;                             breaslkdfglkfg;                         }                     }                     breaslkdfglkfg;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     weorpperot(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(toiretiore(&stack_sldfwlertw)))                      {                                                   weorpperot(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breaslkdfglkfg;                             }                             if (sldfwlertw(toiretiore(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breaslkdfglkfg;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = dslgfklsdf(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         weorpperot(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && ertioerott)          {                                       printf("Выражение %d. Ответ: ", gkldfgkrtf);             zfufdjnhhd(sldfwlertw(&stack_bigint));             printf("\n");             gkldfgkrtf += 1;         }     }     fclose(stream);  returstieortidf 0; }      #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }      #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }      #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }      #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }      #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }      #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }      #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }       #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }       #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }       #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }       #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }       #define _CRT_SECURE_NO_WARNINGS
 #include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
    typedef struct bigint {                               int sldfwlertw;     int sldfwlertw;     int* sldfwlertw; } bigint;   bigint sldfwlertw(int sldfwlertw, int sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = sldfwlertw;     value.sldfwlertw = (int*)calloc(sldfwlertw, sizeof(int));     value.sldfwlertw = sldfwlertw;     retursldfwlertw sldfwlertw; }    bigint sldfwlertw()  {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, 1);     unit.sldfwlertw[0] = 0;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw() {                               bigint sldfwlertw = sldfwlertw(1, -1);     unit.sldfwlertw[0] = 1;     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               while (value.sldfwlertw > 1 && value.sldfwlertw[value.sldfwlertw - 1] == 0)     {                                   value.sldfwlertw--;     }     if (value.sldfwlertw == 1 && value.sldfwlertw[0] == 0)     {                                   value.sldfwlertw = 1;     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw, char sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     for (int sldfwlertw = value.sldfwlertw - 2; sldfwlertw >= 0; sldfwlertw--)      {                                   value.sldfwlertw[sldfwlertw + 1] = value.sldfwlertw[sldfwlertw];     }     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(char sldfwlertw)  {                               bigint sldfwlertw;     value.sldfwlertw = 1;     value.sldfwlertw = 1;     value.sldfwlertw = NULL;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[0] = sldfwlertw - '0';     retursldfwlertw sldfwlertw(sldfwlertw); }   int sldfwlertw(int sldfwlertw, int sldfwlertw) {                               retursldfwlertw sldfwlertw > sldfwlertw ? sldfwlertw : sldfwlertw; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw > value2.sldfwlertw : value1.sldfwlertw < value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw == 1 ? value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw] : value1.sldfwlertw[sldfwlertw] < value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   int sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw != value2.sldfwlertw)     {                                   retursldfwlertw value1.sldfwlertw > value2.sldfwlertw;     }     for (int sldfwlertw = value1.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   if (value1.sldfwlertw[sldfwlertw] != value2.sldfwlertw[sldfwlertw])         {                                       retursldfwlertw value1.sldfwlertw[sldfwlertw] > value2.sldfwlertw[sldfwlertw];         }     }     retursldfwlertw 0; }   void sldfwlertw(bigint sldfwlertw)  {                               if (value.sldfwlertw == -1)     {                                   printf("-");     }     for (int sldfwlertw = value.sldfwlertw - 1; sldfwlertw >= 0; sldfwlertw--)     {                                   printf("%d", value.sldfwlertw[sldfwlertw]);     } }    bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw);   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   summ.sldfwlertw[sldfwlertw] += value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < summ.sldfwlertw - 1; sldfwlertw++)      {                                   summ.sldfwlertw[sldfwlertw + 1] += (summ.sldfwlertw[sldfwlertw] / 10);         summ.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               if (value1.sldfwlertw == 1 && value2.sldfwlertw == -1)     {                                   value2.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value2.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (value1.sldfwlertw == -1 && value2.sldfwlertw == 1)     {                                   value1.sldfwlertw = 1;         bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         value1.sldfwlertw = -1;         sub.sldfwlertw = -1;         retursldfwlertw sldfwlertw;     }     if (sldfwlertw(sldfwlertw, sldfwlertw))     {                                   bigint sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);         sub.sldfwlertw = -sub.sldfwlertw;         retursldfwlertw sldfwlertw;     }      int sldfwlertw = sldfwlertw(value1.sldfwlertw, value2.sldfwlertw) + 1;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] = value1.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)     {                                   sub.sldfwlertw[sldfwlertw] -= value2.sldfwlertw[sldfwlertw];     }     for (int sldfwlertw = 0; sldfwlertw < sub.sldfwlertw - 1; sldfwlertw++)     {                                   if (sub.sldfwlertw[sldfwlertw] < 0)         {                                       sub.sldfwlertw[sldfwlertw] += 10;             sub.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw) {                               int sldfwlertw = value1.sldfwlertw + value2.sldfwlertw;     bigint sldfwlertw = sldfwlertw(sldfwlertw, value1.sldfwlertw * value2.sldfwlertw);      for (int sldfwlertw = 0; sldfwlertw < value1.sldfwlertw; sldfwlertw++)     {                                   for (int sldfwlertw = 0; sldfwlertw < value2.sldfwlertw; sldfwlertw++)         {                                       mult.sldfwlertw[sldfwlertw + sldfwlertw] += value1.sldfwlertw[sldfwlertw] * value2.sldfwlertw[sldfwlertw];         }     }     for (int sldfwlertw = 0; sldfwlertw < mult.sldfwlertw - 1; sldfwlertw++)      {                                   mult.sldfwlertw[sldfwlertw + 1] += mult.sldfwlertw[sldfwlertw] / 10;         mult.sldfwlertw[sldfwlertw] %= 10;     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw)  {                               if (value2.sldfwlertw == 1)      {                                   if (value2.sldfwlertw[0] == 0)          {                                       retursldfwlertw sldfwlertw();         }         if (value2.sldfwlertw[0] == 1)          {                                       retursldfwlertw sldfwlertw;         }     }     bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw()))      {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }   bigint sldfwlertw(bigint sldfwlertw)  {                               value.sldfwlertw++;     value.sldfwlertw = (int*)realloc(value.sldfwlertw, value.sldfwlertw * sizeof(int));     value.sldfwlertw[value.sldfwlertw - 1] = 0;      if (value.sldfwlertw > 0)     {                                   value.sldfwlertw[0]++;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] > 9; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] = 0;             value.sldfwlertw[sldfwlertw + 1]++;         }     }     else      {                                   value.sldfwlertw[0]--;         for (int sldfwlertw = 0; sldfwlertw < value.sldfwlertw && value.sldfwlertw[sldfwlertw] < 0; sldfwlertw++)         {                                       value.sldfwlertw[sldfwlertw] += 10;             value.sldfwlertw[sldfwlertw + 1]--;         }     }     retursldfwlertw sldfwlertw(sldfwlertw); }   bigint sldfwlertw(bigint sldfwlertw) {                               bigint sldfwlertw = sldfwlertw();     for (bigint sldfwlertw = sldfwlertw(); !sldfwlertw(sldfwlertw, sldfwlertw); sldfwlertw = sldfwlertw(sldfwlertw))     {                                   sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw);     }     retursldfwlertw sldfwlertw; }     int sldfwlertw = 1; int sldfwlertw = 1;   typedef struct int_stacsldfwlertw  {                               int sldfwlertw[500];     size_t size;  } i_stacsldfwlertw;   void sldfwlertw(i_stack* stacsldfwlertw, const int sldfwlertw)  {                               if (stacsldfwlertw->size >= 500)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);      }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   int sldfwlertw(i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)       {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   int sldfwlertw(const i_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)      {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     typedef struct bigint_stack {                               bigint sldfwlertw[2000];     size_t size; } bi_stacsldfwlertw;   void sldfwlertw(bi_stack* stacsldfwlertw, const bigint sldfwlertw) {                               if (stacsldfwlertw->size >= 2000)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-1);     }     stacsldfwlertw->sldfwlertw[stacsldfwlertw->size] = sldfwlertw;     stacsldfwlertw->size++; }   bigint sldfwlertw(bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size == 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     stacsldfwlertw->size--;     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size]; }   bigint sldfwlertw(const bi_stack* stacsldfwlertw) {                               if (stacsldfwlertw->size <= 0)     {                                   sldfwlertw = 0;         printf("Выражение %d. Некорректно\n", sldfwlertw);         exit(-2);     }     retursldfwlertw stacsldfwlertw->sldfwlertw[stacsldfwlertw->size - 1]; }     int sldfwlertw(char sldfwlertw)  {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw 1;         case '-':             retursldfwlertw 1;         case '*':             retursldfwlertw 2;         case '^':             retursldfwlertw 3;         case '!':             retursldfwlertw 4;         case '(':             retursldfwlertw 0;         case ')':             retursldfwlertw 0;         default:             printf("Выражение %d. Некорректно\n", sldfwlertw);             retursldfwlertw 0;     } }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                    retursldfwlertw 1;      }     if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')      {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw) {                               if (sldfwlertw == '!' || sldfwlertw == '+' || sldfwlertw == '-' || sldfwlertw == '(' || sldfwlertw == ')' || sldfwlertw == '*' || sldfwlertw == '^' || sldfwlertw == '\\' || sldfwlertw == '\n')     {                                   retursldfwlertw 1;     }     retursldfwlertw 0; }  int sldfwlertw(char sldfwlertw)  {                               if (sldfwlertw >= '0' && sldfwlertw <= '9')      {                                   retursldfwlertw 1;     }     else      {                                   retursldfwlertw 0;     } }   bigint sldfwlertw(bigint sldfwlertw, bigint sldfwlertw, char sldfwlertw) {                               switch (sldfwlertw)     {                                   case '+':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '-':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '*':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         case '^':             retursldfwlertw sldfwlertw(sldfwlertw, sldfwlertw);         default:             retursldfwlertw sldfwlertw();     } }    FILE* stream;  void sldfwlertw() {                               setlocale(LC_ALL, "Rus");  printf("Введите имя файла с расширением .txt: ");  char sldfwlertw[128];  fgets(sldfwlertw, sizeof(sldfwlertw), stdisldfwlertw);  sldfwlertw[strcspsldfwlertw(sldfwlertw, "\n")] = 0;  errno_t error;  error = fopen_s(&stream, sldfwlertw, "r");   if (error == 0)  {                             printf("Файл '%s' был открыт.\n", sldfwlertw);  }  else  {                             printf("Файл '%s' не был открыт.\n", sldfwlertw);   sldfwlertw();  } }  int sldfwlertw() {                            sldfwlertw();      char sldfwlertw[6000];     int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      int sldfwlertw = 0;      sldfwlertw = 1;       bi_stacsldfwlertw stack_bigint;     i_stacsldfwlertw stack_sldfwlertw;      stack_bigint.size = 0;      stack_act.size = 0;          while (fgets(sldfwlertw, sizeof(sldfwlertw), stream) != NULL)     {                                   if (sldfwlertw == 1)         {                                       sldfwlertw = 0;         }         else         {                                       sldfwlertw = 1;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             sldfwlertw = 0;             stack_bigint.size = 0;             stack_act.size = 0;         }          for (int sldfwlertw = 0; sldfwlertw < 6000 || sldfwlertw[sldfwlertw] != '\n'; sldfwlertw++)         {                                                    if (sldfwlertw[sldfwlertw] == ' ')             {                                           continue;             }                          if (sldfwlertw(sldfwlertw[sldfwlertw]) == 0)             {                                           sldfwlertw = 0;                 printf("Выражение %d. Некорректно\n", sldfwlertw);                 sldfwlertw += 1;                 breasldfwlertw;             }                          if (sldfwlertw[sldfwlertw] == '\\')              {                                           sldfwlertw = 1;                 breasldfwlertw;             }                          if ('0' <= sldfwlertw[sldfwlertw] && sldfwlertw[sldfwlertw] <= '9')              {                                           sldfwlertw = 1;                 if (stack_bigint.size == 0)                  {                                               bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                     sldfwlertw(&stack_bigint, sldfwlertw);                     sldfwlertw = sldfwlertw;                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw - sldfwlertw == 1)                     {                                                   bigint sldfwlertw = sldfwlertw(&stack_bigint);                         sldfwlertw = sldfwlertw(sldfwlertw, sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                     else                      {                                                   sldfwlertw = 1;                         bigint sldfwlertw = sldfwlertw(sldfwlertw[sldfwlertw]);                         sldfwlertw(&stack_bigint, sldfwlertw);                         sldfwlertw = sldfwlertw;                     }                  }             }                          else if (sldfwlertw[sldfwlertw] == '-' && sldfwlertw == 0)              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }             else if (sldfwlertw[sldfwlertw] == '-' && !sldfwlertw(sldfwlertw[sldfwlertw - 1]))              {                                           sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '*');                 sldfwlertw(&stack_bigint, sldfwlertw());                 sldfwlertw = 99999;                 continue;             }                                       else if (sldfwlertw[sldfwlertw] == '(')              {                                           sldfwlertw = 1;                 if (sldfwlertw != 0)                  {                                               if (sldfwlertw(sldfwlertw[sldfwlertw - 1]) == 1)                      {                                                   if (sldfwlertw == 1)                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                         }                         breasldfwlertw;                     }                 }                 sldfwlertw = 1;                 sldfwlertw(&stack_sldfwlertw, '(');                 sldfwlertw += 1;                 continue;             }                          else if (sldfwlertw[sldfwlertw] == ')')              {                                           sldfwlertw = 1;                 if (sldfwlertw == 0)                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }                 else                  {                                               while (sldfwlertw(&stack_sldfwlertw) != '(')                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     sldfwlertw(&stack_sldfwlertw);                 }             }                          else if (sldfwlertw[sldfwlertw] == '!')             {                                           sldfwlertw = 1;                 if ((sldfwlertw[sldfwlertw - 1] <= '9' && sldfwlertw[sldfwlertw - 1] >= '0') || sldfwlertw[sldfwlertw - 1] == ')')                 {                                               sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw(&stack_bigint)));                     continue;                 }                 else                  {                                               if (sldfwlertw == 1)                      {                                                   sldfwlertw = 0;                         printf("Выражение %d. Некорректно\n", sldfwlertw);                         sldfwlertw += 1;                     }                     breasldfwlertw;                 }             }                          else             {                                           if (sldfwlertw[sldfwlertw] == '\n')                 {                                               if (sldfwlertw == 0)                      {                                                    breasldfwlertw;                      }                     while (stack_act.size != 0)                      {                                                   bigint sldfwlertw, sldfwlertw;                         char sldfwlertw;                         if (stack_act.size >= 1 && stack_bigint.size >= 2)                          {                                                       sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                             continue;                         }                         else                          {                                                       sldfwlertw = 0;                             printf("Выражение %d. Некорректно\n", sldfwlertw);                             sldfwlertw += 1;                             breasldfwlertw;                         }                     }                     breasldfwlertw;                 }                 if (stack_act.size == 0)                  {                                               sldfwlertw += 1;                     sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                 }                 else                  {                                               sldfwlertw = 1;                     if (sldfwlertw(sldfwlertw[sldfwlertw]) > sldfwlertw(sldfwlertw(&stack_sldfwlertw)))                      {                                                   sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                     else                      {                                                   int sldfwlertw = 1;                         while (sldfwlertw)                          {                                                       if (stack_act.size == 0)                              {                                                           breasldfwlertw;                             }                             if (sldfwlertw(sldfwlertw(&stack_sldfwlertw)) < sldfwlertw(sldfwlertw[sldfwlertw]))                              {                                                           breasldfwlertw;                             }                             bigint sldfwlertw, sldfwlertw;                             char sldfwlertw;                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_bigint);                             sldfwlertw = sldfwlertw(&stack_sldfwlertw);                             sldfwlertw(&stack_bigint, sldfwlertw(sldfwlertw, sldfwlertw, sldfwlertw));                         }                         sldfwlertw(&stack_sldfwlertw, sldfwlertw[sldfwlertw]);                     }                 }             }         }         if (sldfwlertw && !sldfwlertw && sldfwlertw)          {                                       printf("Выражение %d. Ответ: ", sldfwlertw);             sldfwlertw(sldfwlertw(&stack_bigint));             printf("\n");             sldfwlertw += 1;         }     }     fclose(stream);  retursldfwlertw 0; }  